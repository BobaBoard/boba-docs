"use strict";(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[5534],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(5773),r=(n(7378),n(5318));const i={},o="Caching Queries",s={unversionedId:"engineering/boba-frontend/queries-cache",id:"engineering/boba-frontend/queries-cache",title:"Caching Queries",description:"BobaBoard's frontend uses React Query as its query caching mechanism. See our knowledge base for basic information on caches.",source:"@site/docs/engineering/boba-frontend/queries-cache.md",sourceDirName:"engineering/boba-frontend",slug:"/engineering/boba-frontend/queries-cache",permalink:"/docs/engineering/boba-frontend/queries-cache",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/engineering/boba-frontend/queries-cache.md",tags:[],version:"current",frontMatter:{},sidebar:"engineering",previous:{title:"Using Postman",permalink:"/docs/engineering/boba-backend/using-postman"},next:{title:"BobaDocs",permalink:"/docs/engineering/bobadocs"}},l={},c=[{value:"Manual Cache Operations",id:"manual-cache-operations",level:2},{value:"Where to Define Manual Cache Operations",id:"where-to-define-manual-cache-operations",level:3},{value:"Getter and Setters",id:"getter-and-setters",level:3},{value:"The Transformer Pattern",id:"the-transformer-pattern",level:3},{value:"Useful React Query Methods",id:"useful-react-query-methods",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"caching-queries"},"Caching Queries"),(0,r.kt)("p",null,"BobaBoard's frontend uses ",(0,r.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"React Query")," as its query caching mechanism. See our knowledge base for basic information on ",(0,r.kt)("a",{parentName:"p",href:"../knowledge-base/caching"},"caches"),"."),(0,r.kt)("h2",{id:"manual-cache-operations"},"Manual Cache Operations"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"React Query")," automatically manages the caching and refetching of queries. That said, manual operations are required on occasion:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/docs/engineering/knowledge-base/caching#optimistic-updates"},"Optimistic Updates"),":")," we manually write the updated values in the existing cache after receiving new data from the user. This gives the illusion of an immediate update while we wait for server confirmation.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Example:"),' showing the updated board description in the sidebar as soon as the "save" button is clicked.'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Data Preloading:")," to preload the (potentially partial) result of a query when partial data exists in already-loaded ones.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Example:")," showing the first post in a thread (loaded from the board feed data) while waiting for the full thread to load.")))),(0,r.kt)("h3",{id:"where-to-define-manual-cache-operations"},"Where to Define Manual Cache Operations"),(0,r.kt)("p",null,"All caches operation are definined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/cache")," directory. Each entity (e.g. thread, board) should have its own file named as the entity (singular)."),(0,r.kt)("h3",{id:"getter-and-setters"},"Getter and Setters"),(0,r.kt)("p",null,"The cache methods should use the following patterns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"get[entity]InCache"),":")," to retrieve entity data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"set[entity]InCache"),":")," to update entity data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"add[entity]InCache"),":")," to add a new entity data.")),(0,r.kt)("h3",{id:"the-transformer-pattern"},"The Transformer Pattern"),(0,r.kt)("p",null,"Most often update operations have to be repeated by multiple functions across multiple caches. To ensure all functions consistently update an entity across all caches it appears in, we use a transformer pattern:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const set[entity]InCache = ({\n  queryClient: QueryClient,\n  { entityId }: { entityId: string },\n  transform: (oldEntity: EntityType) => EntityType\n}) => {\n    // Find all instance of "entity" in all caches by using the given id.\n    [...]\n\n    // Get the updated value of the old entity\n    const newEntity = transform(oldEntity);\n    if (newEntity !== oldEntity) {\n        // If transformer returns an updated entity, update the caches with the new values\n    }\n}\n')),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The transform method ",(0,r.kt)("strong",{parentName:"p"},"must")," return:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"same instance")," of the entity if no update was done."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"new instance")," of the entity if an update was done.")),(0,r.kt)("p",{parentName:"admonition"},"This ensures React's re-rendering logic correctly picks up (or ignores) the change.")),(0,r.kt)("p",null,"Our update methods can then use different transformers to update the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const setBoardMutedInCache = ({\n  queryClient: QueryClient,\n  { boardId }: { boardId: string }) => {\n      setBoardInCache({\n          queryClient,\n          {boardId},\n          // The transformer\n          (board: Board) => {\n              if (board.muted) {\n                  // The board is already muted, so we return the same object.\n                  return board;\n              }\n              // We return a *new* object with the same property as board, but\n              // the "muted" property set to true.\n              return {\n                ...board,\n                muted: true;\n              }\n          }\n      })\n  }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const setBoardVisibleInCache = ({\n  queryClient: QueryClient,\n  { boardId }: { boardId: string }) => {\n      setBoardInCache({\n          queryClient,\n          {boardId},\n          // The transformer\n          (board: Board) => {\n              if (!board.hidden) {\n                  // The board is already visible, so we return the same object.\n                  return board;\n              }\n              // We return a *new* object with the same property as board, but\n              // the "hidden" property set to false.\n              return {\n                ...board,\n                hidden: false;\n              }\n          }\n      })\n  }\n')),(0,r.kt)("h3",{id:"useful-react-query-methods"},"Useful React Query Methods"),(0,r.kt)("p",null,"If you're working with the cache, it might be useful to familiarize yourself with the following methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://react-query.tanstack.com/reference/QueryClient#queryclientsetqueriesdata"},"QueryClient.setQueriesData")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://react-query.tanstack.com/reference/QueryClient#queryclientgetqueriesdata"},"QueryClient.getQueriesData"))),(0,r.kt)("p",null,"The best way to understand how to use them is to look at the existing implementations of ",(0,r.kt)("inlineCode",{parentName:"p"},"set[Entity]InCache"),"cache methods."))}d.isMDXComponent=!0}}]);