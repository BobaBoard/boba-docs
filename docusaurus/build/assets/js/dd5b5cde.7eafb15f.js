"use strict";(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[2297],{5318:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>h});var t=r(7378);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=p(r),h=i,u=l["".concat(c,".").concat(h)]||l[h]||m[h]||s;return r?t.createElement(u,a(a({ref:n},d),{},{components:r})):t.createElement(u,a({ref:n},d))}));function h(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=l;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var p=2;p<s;p++)a[p]=r[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"},2244:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var t=r(5773),i=(r(7378),r(5318));const s={sidebar_position:2},a="Checking permissions",o={unversionedId:"engineering/boba-backend/permissions/check-permissions",id:"engineering/boba-backend/permissions/check-permissions",title:"Checking permissions",description:"On the server",source:"@site/docs/engineering/boba-backend/permissions/check-permissions.md",sourceDirName:"engineering/boba-backend/permissions",slug:"/engineering/boba-backend/permissions/check-permissions",permalink:"/docs/engineering/boba-backend/permissions/check-permissions",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/engineering/boba-backend/permissions/check-permissions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"engineering",previous:{title:"Intro to permissions",permalink:"/docs/engineering/boba-backend/permissions/intro"},next:{title:"Adding new permissions",permalink:"/docs/engineering/boba-backend/permissions/add-permissions"}},c={},p=[{value:"On the server",id:"on-the-server",level:2},{value:"Permissions fetchers",id:"permissions-fetchers",level:3},{value:"Generic permission checkers",id:"generic-permission-checkers",level:3},{value:"Complex permission checkers",id:"complex-permission-checkers",level:3},{value:"On the client",id:"on-the-client",level:2}],d={toc:p};function m(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"checking-permissions"},"Checking permissions"),(0,i.kt)("h2",{id:"on-the-server"},"On the server"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/BobaBoard/boba-backend/blob/main/handlers/permissions.ts"},"Permission handlers")," are a type of custom ",(0,i.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/using-middleware.html"},"Express middleware"),". They fetch permissions from the database and add them to the incoming request. Optionally, they check whether a specific permissions is present, and automatically return the ",(0,i.kt)("inlineCode",{parentName:"p"},"UNAUTHORIZED")," status code in the negative case."),(0,i.kt)("h3",{id:"permissions-fetchers"},"Permissions fetchers"),(0,i.kt)("p",null,"Handlers named ",(0,i.kt)("inlineCode",{parentName:"p"},"with[Entity]Permissions")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"withThreadPermissions"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withBoardPermissions"),') are "permission fetchers". They extract the appropriate entity id from the request, fetch the corresponding permissions, and add them to the request object under the key ',(0,i.kt)("inlineCode",{parentName:"p"},"current[Entity]Permissions"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Update thread route\nrouter.patch(\n  "threads/:thread_id",\n  ensureLoggedIn,\n  withThreadPermissions,\n  async (req, res) => {\n    const { currentThreadPermissions } = req;\n    // currentThreadPermissions now contains the permissions the user has for the thread with id `thread_id`.\n  }\n);\n')),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If the route has no ",(0,i.kt)("inlineCode",{parentName:"p"},":thread_id")," param, the ",(0,i.kt)("inlineCode",{parentName:"p"},"withThreadPermissions")," handler will throw an error.")),(0,i.kt)("h3",{id:"generic-permission-checkers"},"Generic permission checkers"),(0,i.kt)("p",null,"Handlers named ",(0,i.kt)("inlineCode",{parentName:"p"},"ensure[Entity]Permission")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ensureThreadPermission"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ensureBoardPermission"),") are generic permission checkers. Each of these handlers takes a permission as an argument, and checks that the user has the permission for the given entity. If the permission is not found, the appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"UNAUTHORIZED")," status code is automatically returned."),(0,i.kt)("p",null,"Like permission fetchers, permission checkers add a list of the user's permissions to the request object under the key ",(0,i.kt)("inlineCode",{parentName:"p"},"current[Entity]Permissions"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Create new thread on a board\nrouter.post(\n  "boards/:board_id",\n  ensureLoggedIn,\n  ensureBoardPermission(BoardPermissions.createThread),\n  async (req, res, next) => {\n    // If this handler is reached, the user has the `createThread` permission for the board with id `board_i`.\n    // If ensureBoardPermission fails, a response with status 403 is automatically sent back.\n  }\n);\n')),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If the route has no ",(0,i.kt)("inlineCode",{parentName:"p"},":board_id")," param, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ensureBoardPermission")," handler will throw an error.")),(0,i.kt)("h3",{id:"complex-permission-checkers"},"Complex permission checkers"),(0,i.kt)("p",null,"When checking for the simple existance of a permission is not enough, we can create a permission checker with more specific logic. These handlers are usually named ",(0,i.kt)("inlineCode",{parentName:"p"},"ensure[Condition]")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ensureLoggedIn"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ensureBoardAccess"),"). Their semantic is the same as generic permission checkers."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'router.get("feeds/boards/:board_id", ensureBoardAccess, async (req, res) => {\n  // If this handler is reached, the user has permission to access the board with id `board_id`.\n  // If ensureBoardAccess fails, a response with status 403 is automatically sent back.\n});\n')),(0,i.kt)("h2",{id:"on-the-client"},"On the client"),(0,i.kt)("p",null,"Each board's metadata includes the user's permission for the board and all threads and posts contained within. See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/engineering/rest-api/#operation/getBoardsByUuid"},(0,i.kt)("inlineCode",{parentName:"a"},"boards/{board_id}"))," endpoint for details."),(0,i.kt)("admonition",{type:"TODO"},(0,i.kt)("p",{parentName:"admonition"},"Create documentation about checking permissions on the client and add a link here.")))}m.isMDXComponent=!0}}]);