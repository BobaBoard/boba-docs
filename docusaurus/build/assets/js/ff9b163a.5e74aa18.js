"use strict";(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[1635],{5318:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>h});var n=i(7378);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(i),h=r,c=m["".concat(l,".").concat(h)]||m[h]||u[h]||a;return i?n.createElement(c,s(s({ref:t},p),{},{components:i})):n.createElement(c,s({ref:t},p))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<a;d++)s[d]=i[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},2828:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var n=i(5773),r=(i(7378),i(5318));const a={},s="Visit History",o={unversionedId:"engineering/WIPs/visit-history",id:"engineering/WIPs/visit-history",title:"Visit History",description:"Problem",source:"@site/docs/engineering/WIPs/visit-history.md",sourceDirName:"engineering/WIPs",slug:"/engineering/WIPs/visit-history",permalink:"/docs/engineering/WIPs/visit-history",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/engineering/WIPs/visit-history.md",tags:[],version:"current",frontMatter:{},sidebar:"engineering",previous:{title:"Internal User Id",permalink:"/docs/engineering/WIPs/internal-uid"}},l={},d=[{value:"Problem",id:"problem",level:2},{value:"Current Status",id:"current-status",level:2},{value:"Changes",id:"changes",level:2},{value:"Implementation plan",id:"implementation-plan",level:3},{value:"Migration steps",id:"migration-steps",level:3},{value:"API endpoints",id:"api-endpoints",level:2},{value:"Notes",id:"notes",level:2}],p={toc:d};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"visit-history"},"Visit History"),(0,r.kt)("h2",{id:"problem"},"Problem"),(0,r.kt)("p",null,"Maintain a more detailed history of users' visits to threads. This can be used to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Display a "visited threads history" page for users.'),(0,r.kt)("li",{parentName:"ol"},'Enable users to see "new post/comment" status for previous visits to a thread (in case of accidental refresh, for example).')),(0,r.kt)("h2",{id:"current-status"},"Current Status"),(0,r.kt)("p",null,"Visit to threads are stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"user_thread_last_visits")," table. It has the following schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS user_thread_last_visits(\n    user_id BIGINT REFERENCES users(id) ON DELETE RESTRICT NOT NULL,\n    thread_id BIGINT REFERENCES threads(id) ON DELETE RESTRICT NOT NULL,\n    last_visit_time timestamp NOT NULL DEFAULT now()\n);\nCREATE UNIQUE INDEX user_thread_entry on user_thread_last_visits(user_id, thread_id);\n")),(0,r.kt)("p",null,"Visits are registered through the ",(0,r.kt)("inlineCode",{parentName:"p"},"/threads/[thread_id]/visit")," endpoint, and the database update query\nis defined in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/BobaBoard/boba-backend/blob/master/server/threads/sql/visit-thread-by-string-id.sql"},(0,r.kt)("inlineCode",{parentName:"a"},"server/threads/sql/visit-thread-by-string-id.sql")),"."),(0,r.kt)("h2",{id:"changes"},"Changes"),(0,r.kt)("p",null,"The main issue is the ",(0,r.kt)("inlineCode",{parentName:"p"},"UNIQUE INDEX")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"user_thread_last_visits")," table, which prevents storing multiple visits in the same table. I would suggest dropping the index, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"last_visit_time")," column would still be a misnomer, and many queries would need to be updated to change it."),(0,r.kt)("p",null,"Instead, I propose a completely new ",(0,r.kt)("inlineCode",{parentName:"p"},"user_thread_visits")," table. This would have a similar schema WITHOUT ",(0,r.kt)("inlineCode",{parentName:"p"},"unique")," constraints and with a more reasonable name for the ",(0,r.kt)("inlineCode",{parentName:"p"},"last_visit_time")," column (likely ",(0,r.kt)("inlineCode",{parentName:"p"},"visit_time"),"). We'd need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"(user_id, thread_id, visit_time)")," index to make queries for the latest visit time faster."),(0,r.kt)("p",null,"Purposely leaving the queries as an exercise :)"),(0,r.kt)("h3",{id:"implementation-plan"},"Implementation plan"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_visits")," table."),(0,r.kt)("li",{parentName:"ol"},"Populate ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_visits")," when ",(0,r.kt)("inlineCode",{parentName:"li"},"/threads/[thread_id]/visit")," endpoint is called."),(0,r.kt)("li",{parentName:"ol"},"DO THE MIGRATION STEPS"),(0,r.kt)("li",{parentName:"ol"},"Figure out which queries are using ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_last_visits")," and switch them to ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_visits"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Note:")," this includes updating the ",(0,r.kt)("inlineCode",{parentName:"li"},"thread_notification_dismissals")," view, which needs to be done by querying the DB directly (aka, I will be the one doing that)."))),(0,r.kt)("li",{parentName:"ol"},"NUKE ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_last_visits")," OUT OF EXISTENCE")),(0,r.kt)("h3",{id:"migration-steps"},"Migration steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Deploy the server version writing ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_visits")," in addition to ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_last_visits"),"."),(0,r.kt)("li",{parentName:"ol"},"Dump the ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_last_visits")," entries into ",(0,r.kt)("inlineCode",{parentName:"li"},"user_thread_visits"),"."),(0,r.kt)("li",{parentName:"ol"},"Go back to step 4 in implementation plan.")),(0,r.kt)("p",null,"We could technically nuke ",(0,r.kt)("inlineCode",{parentName:"p"},"user_thread_last_visits")," immediately and create a view as a fallback, but there's only 2-3 queries that rely on it so it's easier to just do the change all together."),(0,r.kt)("h2",{id:"api-endpoints"},"API endpoints"),(0,r.kt)("p",null,"We should leave the definition of API endpoints to access these values for when we're ready to implement UI that needs these values. I've learned my lessons."),(0,r.kt)("p",null,"If we're ready, I would suggest a new ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/@me/history")," endpoint for visits history, as well as augmenting ",(0,r.kt)("inlineCode",{parentName:"p"},"threads/[thread_id]/")," to return details about last visits if we want to do fancy notification views."),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("p",null,"The visit endpoint uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," HTTP method. This is incorrect (it should be ",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),"). Updating it would be an easy extension to this project."))}u.isMDXComponent=!0}}]);