"use strict";(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[8345],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(5773),a=(n(7378),n(5318));const o={sidebar_position:6},i="BobaBackend",s={unversionedId:"engineering/legacy-pages/bobabackend",id:"engineering/legacy-pages/bobabackend",title:"BobaBackend",description:"Each REST route in the server is defined through the same folders structure:",source:"@site/docs/engineering/legacy-pages/bobabackend.md",sourceDirName:"engineering/legacy-pages",slug:"/engineering/legacy-pages/bobabackend",permalink:"/docs/engineering/legacy-pages/bobabackend",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/engineering/legacy-pages/bobabackend.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"engineering",previous:{title:"How to use Storybook",permalink:"/docs/engineering/legacy-pages/howtouse-storybook"},next:{title:"Git Notes",permalink:"/docs/engineering/legacy-pages/git-notes"}},p={},l=[{value:"Using postman for REST API testing",id:"using-postman-for-rest-api-testing",level:2}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bobabackend"},"BobaBackend"),(0,a.kt)("h1",{id:"routes-structure"},"Routes Structure"),(0,a.kt)("p",null,"Each REST route in the server is defined through the same folders structure:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A top-level folder ",(0,a.kt)("strong",{parentName:"p"},"corresponding to the name of the route")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"boards/"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"posts/,")," ",(0,a.kt)("inlineCode",{parentName:"p"},"users/"),")"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"sql/")," folder, containing ",(0,a.kt)("inlineCode",{parentName:"p"},".sql")," files for larger queries, and an ",(0,a.kt)("inlineCode",{parentName:"p"},"index.ts")," file that encapsulates these files, and exports variables and methods resolving to SQL queries. These should be, mostly, self-contained logical units corresponding to common DB operations."),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("strong",{parentName:"p"},"Note:"),' some methods build queries dynamically for efficiency (e.g. turning what would be repeated calls for "insert a tag in a db" method into a single statement). This is not (',(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"and should never be")),") done by concatenating strings. Instead, we use ",(0,a.kt)("a",{parentName:"p",href:"https://vitaly-t.github.io/pg-promise/helpers.html"},"pg-promise helpers"),' to ensure any dynamic query is built as a "',(0,a.kt)("a",{parentName:"p",href:"https://medium.com/@jaredablon_31568/how-to-prevent-sql-injection-vulnerabilities-how-prepared-statements-work-f492c369614f"},"prepared statement"),'".')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"queries.ts")," file, containing the interface between the database and the final REST API routes. Methods in this file usually combine multiple queries exported by ",(0,a.kt)("inlineCode",{parentName:"p"},"sql/index.ts")," into a single operation."),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("strong",{parentName:"p"},"Note:")," some of these methods are imported by ",(0,a.kt)("inlineCode",{parentName:"p"},"routes.ts")," files in other routes. This is not generally discouraged, but queries should be placed within the route that is semantically closest to their usage (e.g. a query to retrieve board permissions should be placed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"boards/")," route, even if it might also be used to check user permissions in ",(0,a.kt)("inlineCode",{parentName:"p"},"posts/"),"). Your best judgement might be required.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"routes.ts")," file which exposes an ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/routing.html"},"express.Router")," object representing the route. Endpoints are attached to the route via either the ",(0,a.kt)("inlineCode",{parentName:"p"},"router.get")," (data fetch) or the ",(0,a.kt)("inlineCode",{parentName:"p"},"router.post")," (data insert/update) methods. The ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoggedIn")," middleware is available for queries dependent on user identification. Each route in the ",(0,a.kt)("inlineCode",{parentName:"p"},"routes.ts")," file relies on one or more methods in ",(0,a.kt)("inlineCode",{parentName:"p"},"queries.ts")," to expose functionality through REST endpoints. It also takes care of checking the validity of users inputs, communicating errors through the appropriate ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"},"HTTP Status Codes"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A route ",(0,a.kt)("em",{parentName:"p"},"should")," also contain a ",(0,a.kt)("inlineCode",{parentName:"p"},"tests/")," folder for tests. These are automatically picked up by ",(0,a.kt)("inlineCode",{parentName:"p"},"mocha")," (our tests suite) when running the appropriate commands. Tests are mostly done at the ",(0,a.kt)("inlineCode",{parentName:"p"},"queries.ts")," level, even though more ",(0,a.kt)("inlineCode",{parentName:"p"},"routes.ts")," tests should be likely written. When at test file becomes too long, it should be separated in logical units (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"boards/tests/permissions.test.ts"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"boards/tests/notifications.test.ts"),")."))))),(0,a.kt)("p",null,"Routes added to ",(0,a.kt)("inlineCode",{parentName:"p"},"all-routes.ts")," are automatically picked up by the server upon start-up."),(0,a.kt)("h1",{id:"how-to-run-tests"},"How to Run Tests"),(0,a.kt)("p",null,"To run tests, you will first need to start the test DB using ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn run start-db"),". You can then run the tests in watch mode (which automatically reruns tests as you update the code) by running ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn run test:watch")," in a separate terminal tab. The tests will print a lot of debug logs, followed by a count of passed and failed cases, and a list of AssertionsErrors for those that didn't succeed. AssertionsErrors indicate that there was a mismatch between the data that the test expected to encounter, and what was actually encountered."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"IMPORTANT:")," the frontend and the tests act on the same database. If you've been using a frontend connected to your local dev server to test things out, then some tests might fail that aren't meant to. Before running tests, make sure to use CTRL+C to stop your db, and run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn run start-db")," again."),(0,a.kt)("h2",{id:"using-postman-for-rest-api-testing"},"Using postman for REST API testing"))}d.isMDXComponent=!0}}]);