(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[4157],{1950:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>f,frontMatter:()=>u,metadata:()=>c,toc:()=>g});var i=n(5773),a=n(7378),o=n(5318);const r="editorContainer_whuR",l="previewContainer_UGSF";var s=n(5068),m=n.n(s),d=n(5620);function p(e){return a.createElement("div",{className:r},a.createElement("h4",null,"Delta:"),a.createElement(d.ZP,(0,i.Z)({},d.lG,{code:e.text.trim(),language:"json"}),(e=>{let{className:t,style:n,tokens:o,getLineProps:r,getTokenProps:l}=e;return a.createElement("pre",{className:t,style:n},o.map(((e,t)=>a.createElement("div",(0,i.Z)({key:t},r({line:e,key:t})),a.createElement("div",null,e.map(((e,t)=>a.createElement("span",(0,i.Z)({key:t},l({token:e,key:t}))))))))))})),a.createElement("h4",null,"Output:"),a.createElement("div",{className:l},a.createElement(m(),{initialText:JSON.parse(e.text),forceSSR:!0})))}const u={sidebar_position:2},h="The Delta Format",c={unversionedId:"engineering/boba-editor/the-delta-format",id:"engineering/boba-editor/the-delta-format",title:"The Delta Format",description:"The Delta format is at the base of QuillJS's text editing capabilities. You can read the in-depth guide on the QuillJS website. This introductory overview goes over what you need to understand to effectively work on BobaEditor.",source:"@site/docs/engineering/boba-editor/the-delta-format.mdx",sourceDirName:"engineering/boba-editor",slug:"/engineering/boba-editor/the-delta-format",permalink:"/docs/engineering/boba-editor/the-delta-format",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/engineering/boba-editor/the-delta-format.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"engineering",previous:{title:"Overview",permalink:"/docs/engineering/boba-editor/overview"},next:{title:"Getting Started",permalink:"/docs/engineering/boba-backend/getting-started"}},b={},g=[{value:"What is a Delta?",id:"what-is-a-delta",level:2},{value:"What does a Delta look like?",id:"what-does-a-delta-look-like",level:2},{value:"Insert operations",id:"insert-operations",level:2},{value:"Inline formatting",id:"inline-formatting",level:3},{value:"Custom inline formats",id:"custom-inline-formats",level:4},{value:"Line formatting",id:"line-formatting",level:3},{value:"Custom line formats",id:"custom-line-formats",level:4},{value:"Embeds",id:"embeds",level:3},{value:"Custom embeds",id:"custom-embeds",level:4}],k={toc:g};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-delta-format"},"The Delta Format"),(0,o.kt)("p",null,"The Delta format is at the base of QuillJS's text editing capabilities. You can ",(0,o.kt)("a",{parentName:"p",href:"https://quilljs.com/docs/delta/"},"read the in-depth guide")," on the QuillJS website. This introductory overview goes over what you need to understand to effectively work on BobaEditor."),(0,o.kt)("h2",{id:"what-is-a-delta"},"What is a Delta?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A Delta is a presentation-agnostic representation of formatted text.")," It contains everything we need to translate text into a visual format (e.g. HTML) without implementation-specific details."),(0,o.kt)("p",null,"The separation of representation and implementation means ",(0,o.kt)("strong",{parentName:"p"},"changes to BobaEditor's rendering logic also influence the rendering of older, stored Deltas"),". This makes it possible to change our output (e.g. CSS classes, rendered HTML elements, JavaScript event handlers) without worrying about compatibility with previous versions, something that would be extremely hard if we stored the rendered HTML."),(0,o.kt)("h2",{id:"what-does-a-delta-look-like"},"What does a Delta look like?"),(0,o.kt)("p",null,"In its simplest form (the one eventually stored in the database) a Delta is an array of insert operations."),(0,o.kt)(p,{text:'\n[\n    { "insert": "This is a H1 Header" },\n    { "insert": "\\n", "attributes": { "header": 1 } },\n    { "insert": "You can have various types of formatting, like " },\n    { "insert": "inline code", "attributes": { "code": true } },\n    { "insert": ", " },\n    { "insert": "bold text", "attributes": { "bold": true } },\n    { "insert": ", or even " },\n    { "insert": "spoilers!", "attributes": { "inline-spoilers": true } },\n    { "insert": "!\\n" },\n    { "insert": \n      { \n        "block-image": {\n          "src": "/img/documentation/cool.png",\n          "width": "200",\n          "height": "106"\n        }\n      }\n    },\n    { "insert": "As seen above \u261d\ufe0f, images and other types of embeds are also supported." }\n]',mdxType:"EditorPreview"}),(0,o.kt)("h2",{id:"insert-operations"},"Insert operations"),(0,o.kt)("p",null,"There are three types of insert operations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Inline formatting"),": for inline styles (e.g. bold, text spoilers)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Line formatting"),": for styles applied to the preceding line as a whole (e.g. paragraph centering, headings, lists)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Embeds"),": for non-text content.")),(0,o.kt)("h3",{id:"inline-formatting"},"Inline formatting"),(0,o.kt)("p",null,'Inline formatting applies only to the text within a specific insert operation. The type of formatting is specified through the "attributes" property of the corresponding insert operation.'),(0,o.kt)(p,{text:'\n[\n    { "insert": "Here\'s an " },\n    { "insert": "example", "attributes": { "italic": true } },\n    { "insert": " of " },\n    { "insert": "inline ", "attributes": { "bold": true } },\n    { "insert": "~styles~", "attributes": \n        { \n          "bold": true, \n          "link": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",\n          "italic": true\n        }\n    }\n]',mdxType:"EditorPreview"}),(0,o.kt)("h4",{id:"custom-inline-formats"},"Custom inline formats"),(0,o.kt)("p",null,"For a practical example of a custom inline styles, you can refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/BobaBoard/boba-editor/blob/master/src/custom-nodes/InlineSpoilers.ts"},"InlineSpoilers.tsx"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"InlineSpoilers")," class extends the ",(0,o.kt)("inlineCode",{parentName:"p"},"blots/inline")," class from Quill. This is used for inline text that can accept further formatting."),(0,o.kt)("p",null,"You can ",(0,o.kt)("a",{parentName:"p",href:"https://quilljs.com/guides/cloning-medium-with-parchment/#basic-formatting"},"read more about inline blots"),' on the "Cloning Medium with Parchment" example on the QuillJS website.'),(0,o.kt)("h3",{id:"line-formatting"},"Line formatting"),(0,o.kt)("p",null,"Line formatting applies to the whole preceding line, as delineated by the newline character (",(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),'). The type of formatting is specified through the "attributes" property of the corresponding insert operation, whose textual value is a single ',(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),"."),(0,o.kt)(p,{text:'\n[\n    { "insert": "When a insert operation contains only a single \'\\\\n\' its attributes apply to the whole previous \\n" },\n    { "insert": "line (which can still have " },\n    { "insert": "inline attributes", "attributes": { "bold": true } },\n    { "insert": ")" },\n    { "insert": "\\n", "attributes": { "header": 1 } },\n    { "insert": "!" }\n]',mdxType:"EditorPreview"}),(0,o.kt)("h4",{id:"custom-line-formats"},"Custom line formats"),(0,o.kt)("p",null,"BobaEditor doesn't currently have an example of a custom line formatting element, which are (in theory, since we've never tried) implemented by extending the ",(0,o.kt)("inlineCode",{parentName:"p"},"blots/block")," class from Quill. These are used for text formatting operations that are mutually exclusive (i.e. a ",(0,o.kt)("inlineCode",{parentName:"p"},"<h1>")," element cannot appear within a ",(0,o.kt)("inlineCode",{parentName:"p"},"<blockquote>"),")."),(0,o.kt)("p",null,"You can ",(0,o.kt)("a",{parentName:"p",href:"https://quilljs.com/guides/cloning-medium-with-parchment/#blockquote-and-headers"},"read more about block blots"),' on the "Cloning Medium with Parchment" example on the QuillJS website.'),(0,o.kt)("h3",{id:"embeds"},"Embeds"),(0,o.kt)("p",null,"Embeds are complex, non-textual elements. In the case of embeds, the value of the insert attribute will be an object with a single attribute named after the type of embed itself. The value of this attribute will be passed to the embed element for rendering."),(0,o.kt)(p,{text:'\n[\n    { "insert": "Embeds represent complex non-textual elements, like images:" },\n    { "insert": \n      { \n        "block-image": {\n          "src": "https://media1.tenor.com/images/4335e4cadbb8ac96f1e888710ebbff08/tenor.gif?itemid=15782429",\n          "width": "200",\n          "height": "200",\n          "spoilers": true\n        }\n      }\n    }\n]',mdxType:"EditorPreview"}),(0,o.kt)("h4",{id:"custom-embeds"},"Custom embeds"),(0,o.kt)("p",null,"For an example of how to implement a custom embed, you can look at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/BobaBoard/boba-editor/blob/master/src/custom-nodes/BlockImage.ts"},"BlockImage.tsx"),". This, like other embeds, extends the ",(0,o.kt)("inlineCode",{parentName:"p"},"blots/block/embed")," class from Quill. The important methods to implement are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"create")),": the entry point of embed rendering. Its only argument is the value of the embed attribute specified by the ",(0,o.kt)("inlineCode",{parentName:"p"},"blotName")," property (",(0,o.kt)("inlineCode",{parentName:"p"},"block-image")," in the previous example)."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"create")," returns the root DOM node of the embed element, which is created by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"super.create()")," and whose node type (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"div"),") is determined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"tagName")," property.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"value")),": given the root DOM node returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"create"),", extracts the value of the embed element."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"value")," returns the proprieties that need to be stored to recreate the embed during the insert operation (",(0,o.kt)("inlineCode",{parentName:"p"},"{src: ..., width: ..., ...}")," in the previous example)."))),(0,o.kt)("p",null,"You can ",(0,o.kt)("a",{parentName:"p",href:"https://quilljs.com/guides/cloning-medium-with-parchment/#images"},"read more about embed blots"),' on the "Cloning Medium with Parchment" example on the QuillJS website.'))}f.isMDXComponent=!0},471:()=>{},1632:()=>{}}]);