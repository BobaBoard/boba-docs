"use strict";(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[7089],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=a,h=u["".concat(c,".").concat(g)]||u[g]||p[g]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(5773),a=(n(7378),n(5318));const i={},o="Caching",s={unversionedId:"engineering/knowledge-base/caching",id:"engineering/knowledge-base/caching",title:"Caching",description:"Caches and Optimistic Updates",source:"@site/docs/engineering/knowledge-base/caching.md",sourceDirName:"engineering/knowledge-base",slug:"/engineering/knowledge-base/caching",permalink:"/docs/engineering/knowledge-base/caching",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/engineering/knowledge-base/caching.md",tags:[],version:"current",frontMatter:{},sidebar:"engineering",previous:{title:"Development Lifecycle",permalink:"/docs/engineering/knowledge-base/development-lifecycle"},next:{title:"Recommended Tools",permalink:"/docs/engineering/knowledge-base/recommended-tools"}},c={},l=[{value:"Caches and Optimistic Updates",id:"caches",level:2},{value:"Optimistic Updates",id:"optimistic-updates",level:3}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"caching"},"Caching"),(0,a.kt)("h2",{id:"caches"},"Caches and Optimistic Updates"),(0,a.kt)("p",null,"A cache is a temporary storage location that saves data from slow queries (e.g. network queries, database queries) for faster access. Caches are used to quickly retrieve data that hasn't changed, reducing the load on the system and giving the illusion of faster operations. They're also used to retrieve partial pre-existing data to display while loading the full data in the background."),(0,a.kt)("p",null,"BobaBoard uses two main caches:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A frontend cache that stores and manages data from the backend. This uses ",(0,a.kt)("a",{parentName:"li",href:"https://react-query.tanstack.com/"},"React Query"),"."),(0,a.kt)("li",{parentName:"ul"},"A backend cache that manages rerely-changing data (e.g. board details). This uses ",(0,a.kt)("a",{parentName:"li",href:"https://redis.io/"},"Redis"),".")),(0,a.kt)("h3",{id:"optimistic-updates"},"Optimistic Updates"),(0,a.kt)("p",null,"Optimistic updates are used in the frontend to give the illusion of quick data-modifying operations (e.g. updating tags, board descriptions). Rather than wait for the server to confirm the operation succeeded, the updated data is immediately saved in the cache and displayed. If the server returns success, no further action is needed. If the server fails, an error message is shown and the cache is reverted to the previous state."))}p.isMDXComponent=!0}}]);