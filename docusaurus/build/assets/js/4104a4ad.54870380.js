"use strict";(self.webpackChunkbobadocs=self.webpackChunkbobadocs||[]).push([[857],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(5773),a=(n(7378),n(5318));const i={},r='"Native" Gif Search',l={unversionedId:"product/WIPs/extensible-dropdown",id:"product/WIPs/extensible-dropdown",title:'"Native" Gif Search',description:"Problem Summary",source:"@site/docs/product/WIPs/extensible-dropdown.md",sourceDirName:"product/WIPs",slug:"/product/WIPs/extensible-dropdown",permalink:"/docs/product/WIPs/extensible-dropdown",draft:!1,editUrl:"https://github.com/essential-randomness/bobadocs/edit/main/docs/product/WIPs/extensible-dropdown.md",tags:[],version:"current",frontMatter:{},sidebar:"product",previous:{title:"Minimize Editor",permalink:"/docs/product/WIPs/minimize-editor"},next:{title:"Mockups",permalink:"/docs/product/mockups/page"}},s={},p=[{value:"Problem Summary",id:"problem-summary",level:2},{value:"Current Status",id:"current-status",level:2},{value:"Component Props",id:"component-props",level:3},{value:"Desktop View",id:"desktop-view",level:3},{value:"Mobile View",id:"mobile-view",level:3},{value:"Final Result",id:"final-result",level:2},{value:"Mockup",id:"mockup",level:3},{value:"Considerations",id:"considerations",level:3},{value:"What We Have",id:"what-we-have",level:2},{value:"Roadmap",id:"roadmap",level:2},{value:"Proposed Code Changes",id:"proposed-code-changes",level:2},{value:"Current",id:"current",level:3},{value:"New",id:"new",level:3},{value:"Text Option Types",id:"text-option-types",level:4},{value:"Image Option Type",id:"image-option-type",level:4},{value:"Final Dropdown Type",id:"final-dropdown-type",level:4},{value:"Component Code",id:"component-code",level:4}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"native-gif-search"},'"Native" Gif Search'),(0,a.kt)("h2",{id:"problem-summary"},"Problem Summary"),(0,a.kt)("p",null,"The current ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/BobaBoard/boba-components/blob/master/src/common/DropdownListMenu.tsx"},"dropdown menu component")," (whose current behavior ",(0,a.kt)("a",{parentName:"p",href:"https://bobaboard-ui.netlify.app/?path=/story/dropdown-preview--multiple-dropdowns"},"can be seen here"),') only allows the display of "text + (optional) icon" options. In order to use it for GIF search (and, in the future, emoji/sticker selection), we need to expand it to include the ability to select between images.'),(0,a.kt)("h2",{id:"current-status"},"Current Status"),(0,a.kt)("h3",{id:"component-props"},"Component Props"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface DropdownProps {\n  // The trigger button.\n  children: React.ReactElement;\n  // An extra component to optionally display above the set of options.\n  header?: React.ReactElement;\n  // An array of options to display within the dropdown. If no option is present,\n  // the trigger button (children prop) is returned as is.\n  options?: ({\n    name: string;\n    icon?: IconDefinition | string;\n    color?: string;\n  } & (\n    | // Click action OR...\n    { link: LinkWithAction }\n    // ...the recursive set of options for the next page.\n    | { options: DropdownProps["options"] }\n  ))[];\n  /* irrelevant stuff */\n}\n')),(0,a.kt)("h3",{id:"desktop-view"},"Desktop View"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Dropdown on Desktop",src:n(2492).Z,width:"1394",height:"988"})),(0,a.kt)("h3",{id:"mobile-view"},"Mobile View"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Dropdown on Mobile",src:n(9422).Z,width:"996",height:"1022"})),(0,a.kt)("h2",{id:"final-result"},"Final Result"),(0,a.kt)("h3",{id:"mockup"},"Mockup"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Gif Search",src:n(9831).Z,width:"1128",height:"1061"})),(0,a.kt)("h3",{id:"considerations"},"Considerations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'Q: Can the same "selection page" be comprised of both images and textual options?'),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"No."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Q: Can an image selection page be displayed AFTER a textual options page?"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Yes, and we can use the same ",(0,a.kt)("inlineCode",{parentName:"li"},"DropdownContent.previousOption")," prop we already have coded to allow returning to the previous page."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'Q: Can "image selection" have multiple pages?'),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Technically yes, but I would skip it for now."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'Q: Which "codebase" should be in charge of making requests to the gifs endpoint?'),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This has historically been part of the editor itself. It will likely need to change, and I'll\nspend more brainpower on how once we're closer to tying everything up together. ",(0,a.kt)("strong",{parentName:"li"},"The initial component should not be tied to any particular image provider.")," Ideally we could reuse it for Tenor, Giphy or even our own internal search."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Q: Do we want it to be simply image selection or also allow selecting videos (bc of the gif size vs mp4 size issue)?"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"I guess we'll have to support passing videos for gifs, but I'd look at what react-tenor does."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Q: Do we want a masonry-style display for images or a grid-like style one?"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"React-tenor currently uses grid, and I'd keep it that way for now because it's easier."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Q: What are the accessibility considerations for something like this?"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"What happens if people pause automatic gif playing? Should they still be playing in the\nselector?",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"IMO, yes."))),(0,a.kt)("li",{parentName:"ul"},"Dropdown should have correct tab order (double-check) but is missing ARIA states. We can fix\nthis if we want, but at least adding image selection doesn't make accessibility worse."),(0,a.kt)("li",{parentName:"ul"},"TBD.")))),(0,a.kt)("h2",{id:"what-we-have"},"What We Have"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An example of a dropdown with filterable options in ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/BobaBoard/boba-components/blob/master/src/tags/BoardSelector.tsx"},"BoardSelector"),"."),(0,a.kt)("li",{parentName:"ul"},"A gif search component (",(0,a.kt)("a",{parentName:"li",href:"https://github.com/BobaBoard/boba-editor/blob/master/src/TenorKeyboard.js"},"Tenor Keyboard")," in the editor codebase) made by shamefully hacking ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CultureHQ/react-tenor"},"React Tenor")," to suit our needs."),(0,a.kt)("li",{parentName:"ul"},"If we want to have a masonry-style image layout we can reuse ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/BobaBoard/boba-components/blob/master/src/layout/MasonryView.tsx"},"MasonryView"),".")),(0,a.kt)("h2",{id:"roadmap"},"Roadmap"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Change ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/BobaBoard/boba-components/blob/master/src/common/DropdownListMenu.tsx"},"DropdownListMenu")," to allow a series of images as a potential option."),(0,a.kt)("li",{parentName:"ol"},"Create an ",(0,a.kt)("inlineCode",{parentName:"li"},"ImageSearch")," component that wraps a DropdownList + a filter, and potentially allows choosing between a changing list of suggestions (like in react-tenor)."),(0,a.kt)("li",{parentName:"ol"},"Decide the data flow from user input to the display of the correct list of images for GIF search."),(0,a.kt)("li",{parentName:"ol"},"Implement the right calls to the Tenor API."),(0,a.kt)("li",{parentName:"ol"},"Change ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/BobaBoard/boba-editor/blob/9d5a60c3c4aea14e7d1b84ec6e3391a3dda2e4c2/src/Editor.tsx"},"Editor")," to call to an external component for GIF search.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/BobaBoard/boba-editor/tree/context-render"},"Example branch")," of how this could be done by using context.")))),(0,a.kt)("h2",{id:"proposed-code-changes"},"Proposed Code Changes"),(0,a.kt)("h3",{id:"current"},"Current"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface DropdownProps {\n  // The trigger button.\n  children: React.ReactElement;\n  // Am extra component to optionally display above the set of options.\n  header?: React.ReactElement;\n  // An array of options to display the dropdown. If no option is present,\n  // the trigger button is displayed as it is.\n  options?: ({\n    name: string;\n    icon?: IconDefinition | string;\n    color?: string;\n  } & (\n    | // Click action OR...\n    { link: LinkWithAction }\n    // ...the recursive set of options for the next page.\n    | { options: DropdownProps["options"] }\n  ))[];\n  /* irrelevant stuff */\n}\n')),(0,a.kt)("h3",{id:"new"},"New"),(0,a.kt)("h4",{id:"text-option-types"},"Text Option Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface TextOptionWithLink {\n    name: string;\n    icon?: IconDefinition | string;\n    color?: string;\n    link: LinkWithAction;\n};\n\ninterface TextOptionWithNesting {\n    name: string;\n    icon?: IconDefinition | string;\n    color?: string;\n    options: DropdownProps["options"]\n}\n\ninterface TextOption = TextOptionWithLink | TextOptionWithNesting;\n')),(0,a.kt)("h4",{id:"image-option-type"},"Image Option Type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface ImageOption {\n  // If we support video, we likely need to add another option here.\n  image: string;\n  // For accessibility reasons?\n  name?: string;\n  // This could just be "onClick" if we don\'t support "open in a new page".\n  link: LinkWithAction;\n  // Note: images don\'t support nesting.\n}\n')),(0,a.kt)("h4",{id:"final-dropdown-type"},"Final Dropdown Type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface DropdownProps {\n  /* All the same*/\n\n  // Note: array of images OR array of texts, not mixing them together in the same list.\n  // Other note: having a ImageOption[][] would easily enable multiple pages of images,\n  // but this doesn't help us for GIF search cause we don't want to fetch all the pages\n  // at the same time, so we'd still have to figure out how to do it only on request.\n  options?: ImageOption[] | TextOption[];\n\n  /* irrelevant stuff */\n}\n")),(0,a.kt)("h4",{id:"component-code"},"Component Code"),(0,a.kt)("p",null,"I think the easiest way of doing this would be to have two separate ",(0,a.kt)("inlineCode",{parentName:"p"},"DropdownContent")," implementations, one for ",(0,a.kt)("inlineCode",{parentName:"p"},"TextOption[]")," and one for ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageOption[]"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"DropdownContent")," can then be a mostly-empty wrapper that just delegates to ",(0,a.kt)("inlineCode",{parentName:"p"},"DropdownImageContent")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"DropdownTextContent")," according to the type of the options array. This means ",(0,a.kt)("inlineCode",{parentName:"p"},"DropdownMenu"),"'s code won't have to change."),(0,a.kt)("p",null,"I think it might make sense to also move the Dropdown code to its own folder and split components in their own files."))}d.isMDXComponent=!0},2492:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/dropdown-desktop-eb1cf9a66f36caf2791f13e88e999788.png"},9422:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/dropdown-mobile-8f5dbbaf8ec74bc03f7b4577cbfbcd93.png"},9831:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/gif-search-a5d99aa39b5f8713fc1b62dd381b8572.png"}}]);